{"version":3,"sources":["ArjunCard.js","ArjunCard2.js","ArjunCard3.js","ArjunCard4.js","ArjunCard5.js","Arjun.js","serviceWorker.js","index.js"],"names":["ArjunCard","props","className","name","alt","src","ArjunCard2","ArjunCard3","ArjunCard4","ArjunCard5","ReactGA","initialize","pageview","window","location","pathname","search","Arjun","onChangeValue","event","setState","value","target","state","type","placeholder","this","onChange","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAYeA,G,MAXG,SAAAC,GAChB,OACE,yBAAKC,UAAU,2DACb,4BAAKD,EAAME,MADb,IACwB,qCACtB,yBACEC,IAAI,QACJC,IAAG,+BAA0BJ,EAAME,KAAhC,gCCOIG,EAZI,SAAAL,GACjB,OACE,yBAAKC,UAAU,2DACb,4BAAKD,EAAME,MADb,IACwB,uCACtB,yBACEC,IAAI,QACJC,IAAG,+BAA0BJ,EAAME,KAAhC,+BCMII,EAZI,SAAAN,GACjB,OACE,yBAAKC,UAAU,2DACb,4BAAKD,EAAME,MADb,IACwB,sCACtB,yBACEC,IAAI,QACJC,IAAG,+BAA0BJ,EAAME,KAAhC,+BCMIK,EAZI,SAAAP,GACjB,OACE,yBAAKC,UAAU,2DACb,4BAAKD,EAAME,MADb,IACwB,sCACtB,yBACEC,IAAI,QACJC,IAAG,+BAA0BJ,EAAME,KAAhC,+BCMIM,EAZI,SAAAR,GACjB,OACE,yBAAKC,UAAU,2DACb,4BAAKD,EAAME,MADb,IACwB,0CACtB,yBACEC,IAAI,QACJC,IAAG,+BAA0BJ,EAAME,KAAhC,+B,OCUXO,IAAQC,WADU,kBAElBD,IAAQE,SAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,Q,IAuC7CC,E,YApCb,aAAe,IAAD,8BACZ,+CAMFC,cAAgB,SAAAC,GACd,EAAKC,SAAS,CAAEC,MAAOF,EAAMG,OAAOD,SALpC,EAAKE,MAAQ,CACXF,MAAO,IAJG,E,sEAaZ,OAGE,yBAAKnB,UAAU,MACb,0CACA,2BACEsB,KAAK,OACLC,YAAY,kBACZJ,MAAOK,KAAKH,MAAMF,MAClBM,SAAUD,KAAKR,gBAEjB,6BACA,kBAAC,EAAD,CAAWf,KAAMuB,KAAKH,MAAMF,QAC5B,kBAAC,EAAD,CAAYlB,KAAMuB,KAAKH,MAAMF,QAC7B,kBAAC,EAAD,CAAYlB,KAAMuB,KAAKH,MAAMF,QAC7B,kBAAC,EAAD,CAAYlB,KAAMuB,KAAKH,MAAMF,QAC7B,kBAAC,EAAD,CAAYlB,KAAMuB,KAAKH,MAAMF,QAC7B,0D,GA/BYO,aCTAC,QACW,cAA7BhB,OAAOC,SAASgB,UAEe,UAA7BjB,OAAOC,SAASgB,UAEhBjB,OAAOC,SAASgB,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SDyH7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4f95e6ff.chunk.js","sourcesContent":["import React from \"react\";\r\nconst ArjunCard = props => {\r\n  return (\r\n    <div className=\"tc bg-lightest-yellow dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <h2>{props.name}</h2> <h3>Robo </h3>\r\n      <img\r\n        alt=\"robot\"\r\n        src={`https://robohash.org/${props.name}1?set=set1&size=150x150`}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default ArjunCard;","import React from \"react\";\r\n\r\nconst ArjunCard2 = props => {\r\n  return (\r\n    <div className=\"tc bg-lightest-yellow dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <h2>{props.name}</h2> <h3>Monster</h3>\r\n      <img\r\n        alt=\"robot\"\r\n        src={`https://robohash.org/${props.name}1?set=set2&size=150x150`}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ArjunCard2;\r\n","import React from \"react\";\r\n\r\nconst ArjunCard3 = props => {\r\n  return (\r\n    <div className=\"tc bg-lightest-yellow dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <h2>{props.name}</h2> <h3> Heads</h3>\r\n      <img\r\n        alt=\"robot\"\r\n        src={`https://robohash.org/${props.name}1?set=set3&size=150x150`}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ArjunCard3;\r\n","import React from \"react\";\r\n\r\nconst ArjunCard4 = props => {\r\n  return (\r\n    <div className=\"tc bg-lightest-yellow dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <h2>{props.name}</h2> <h3>Kitten</h3>\r\n      <img\r\n        alt=\"robot\"\r\n        src={`https://robohash.org/${props.name}1?set=set4&size=150x150`}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ArjunCard4;\r\n","import React from \"react\";\r\n\r\nconst ArjunCard5 = props => {\r\n  return (\r\n    <div className=\"tc bg-lightest-yellow dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <h2>{props.name}</h2> <h3>Next Birth</h3>\r\n      <img\r\n        alt=\"robot\"\r\n        src={`https://robohash.org/${props.name}1?set=set5&size=150x150`}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ArjunCard5;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ArjunCard from \"./ArjunCard\";\nimport ArjunCard2 from \"./ArjunCard2\";\nimport ArjunCard3 from \"./ArjunCard3\";\nimport ArjunCard4 from \"./ArjunCard4\";\nimport ArjunCard5 from \"./ArjunCard5\";\nimport ReactGA from 'react-ga';\n\n\n\n\n// function initializeReactGA() {\n//   ReactGA.initialize('UA-145898279-1');\n//   ReactGA.pageview('/homepage');\n// }\n\nconst trackingId= \"UA-145898279-1\";\nReactGA.initialize(trackingId);\nReactGA.pageview(window.location.pathname + window.location.search);\n\nclass Arjun extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: \"\"\n    };\n  }\n  onChangeValue = event => {\n    this.setState({ value: event.target.value });\n  };\n \n\n  render() {\n    return (\n      \n     \n      <div className=\"tc\">\n        <h1> TAARKIK</h1>\n        <input\n          type=\"text\"\n          placeholder=\"Enter your name\"\n          value={this.state.value}\n          onChange={this.onChangeValue}\n        />\n        <br />\n        <ArjunCard name={this.state.value} />\n        <ArjunCard2 name={this.state.value} />\n        <ArjunCard3 name={this.state.value} />\n        <ArjunCard4 name={this.state.value} />\n        <ArjunCard5 name={this.state.value} />\n        <h1>your future versions </h1>\n      </div>\n    );\n  }\n}\n\nexport default Arjun;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport Arjun from './Arjun';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<Arjun />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n\n// unregister() to register() below. Note this comes with some pitfalls.\n\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();"],"sourceRoot":""}
